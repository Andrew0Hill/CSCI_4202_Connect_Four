<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1487915426663">{:repl-history {:ide [], :local [&quot;(find-move 0 [[0,0,0,0,1,1],[0,0,0,0,0,2],[0,1,2,1,2,1],[0,0,0,0,0,0],[0,0,0,0,1,2],[0,0,0,0,2,2],[0,0,0,0,2,1]] 1)&quot; &quot;(map #(partition 4 1 %) ([0 0 0] [0 0 0]))&quot; &quot;(map #(partition 4 1 %) [[0 0 0] [0 0 0]])&quot; &quot;(partition 4 1 [[0 0 0 0][0 0 0 0]])&quot; &quot;(map)&quot; &quot;(map #(partition 4 1 %) [[0 0 0 0] [0 0 0 0]])&quot; &quot;(map #(partition 4 1 %) [[0 0 0 0 0 0] [0 0 0 0 0 0] [0 0 0 0 0 0] [0 0 0 0 0 0]])&quot; &quot;(flatten (map #(partition 4 1 %) [[0 0 0 0 0 0] [0 0 0 0 0 0] [0 0 0 0 0 0] [0 0 0 0 0 0]]))&quot; &quot;(apply =(apply concat (map #(partition 4 1 %) [[0 0 0 0 0 0] [0 0 0 0 0 0] [0 0 0 0 0 0] [0 0 0 0 0 0]])))&quot; &quot;(map $(apply concat %) (map #(partition 4 1 %) [[0 0 0 0 0 0] [0 0 0 0 0 0] [0 0 0 0 0 0] [0 0 0 0 0 0]]))&quot; &quot;(map #(apply = %) (map #(partition 4 1 %) [[0 0 0 0 0 0] [0 0 0 0 0 0] [0 0 0 0 0 0] [0 0 0 0 0 0]]))&quot; &quot;(map #(apply concat %) (map #(partition 4 1 %) [[0 0 0 0 0 0] [0 0 0 0 0 0] [0 0 0 0 0 0] [0 0 0 0 0 0]]))&quot; &quot;(time (apply concat (map #(partition 4 1 %) [[0 0 0 0 0 0] [0 0 0 0 0 0] [0 0 0 0 0 0] [0 0 0 0 0 0]])))&quot; &quot;(time (map #((when (not= (first %) 0) (apply = %))) (apply concat (map #(partition 4 1 %) [[0 0 0 0 0 0] [0 0 0 0 0 0] [0 0 0 0 0 0] [0 0 0 0 0 0]]))))&quot; &quot;(map #(apply = %) (apply concat (map #(partition 4 1 %) [[0 0 0 0 0 0] [0 0 0 0 0 0] [0 0 0 0 0 0] [0 0 0 0 0 0]])))&quot; &quot;(map #(apply = %) (apply concat (map #((when (not zero?) (partition 4 1 %) [[0 0 0 0 0 0] [0 0 0 0 0 0] [0 0 0 0 0 0] [0 0 0 0 0 0]])))&quot; &quot;(map #(apply = %) (apply concat (map #((when (not zero?) (partition 4 1 %))) [[0 0 0 0 0 0] [0 0 0 0 0 0] [0 0 0 0 0 0] [0 0 0 0 0 0]])))&quot; &quot;(map #(apply = %) (apply concat (map #((when (and (not zero?) number?) (partition 4 1 %))) [[0 0 0 0 0 0] [0 0 0 0 0 0] [0 0 0 0 0 0] [0 0 0 0 0 0]])))&quot; &quot;(time (map #(apply = %) (apply concat (map #(partition 4 1 %) [[0 0 0 0 0 0] [0 0 0 0 0 0] [0 0 0 0 0 0] [0 0 0 0 0 0]]))))&quot; &quot;(map #(set %) (apply concat (map #(partition 4 1 %) [[0 0 0 0 0 0] [0 0 0 0 0 0] [0 0 0 0 0 0] [0 0 0 0 0 0]])))&quot; &quot;(time (map #(set %) (apply concat (map #(partition 4 1 %) [[0 0 0 0 0 0] [0 0 0 0 0 0] [0 0 0 0 0 0] [0 0 0 0 0 0]]))))&quot; &quot;(map #((&gt; (count %) 1)) (map #(set %) (apply concat (map #(partition 4 1 %) [[0 0 0 0 0 0] [0 0 0 0 0 0] [0 0 0 0 0 0] [0 0 0 0 0 0]])))&quot; &quot;(map #((&gt; (count %) 1)) (map #(set %) (apply concat (map #(partition 4 1 %) [[0 0 0 0 0 0] [0 0 0 0 0 0] [0 0 0 0 0 0] [0 0 0 0 0 0]]))))&quot; &quot;(apply set (apply concat (map #(partition 4 1 %) [[0 0 0 0 0 0] [0 0 0 0 0 0] [0 0 0 0 0 0] [0 0 0 0 0 0]])))&quot; &quot;(map #((count (distinct %)))(apply concat (map #(partition 4 1 %) [[0 0 0 0 0 0] [0 0 0 0 0 0] [0 0 0 0 0 0] [0 0 0 0 0 0]])))&quot; &quot;(count (distinct [0 0 0 0]))&quot; &quot;(count (distinct (0 0 0 0))&quot; &quot;(count (distinct (0 0 0 0)))&quot; &quot;(map #((count (distinct (quote %))))(apply concat (map #(partition 4 1 %) [[0 0 0 0 0 0] [0 0 0 0 0 0] [0 0 0 0 0 0] [0 0 0 0 0 0]])))&quot; &quot;(map #((count (distinct '%)))(apply concat (map #(partition 4 1 %) [[0 0 0 0 0 0] [0 0 0 0 0 0] [0 0 0 0 0 0] [0 0 0 0 0 0]])))&quot; &quot;(map #((count (distinct (into [] %))))(apply concat (map #(partition 4 1 %) [[0 0 0 0 0 0] [0 0 0 0 0 0] [0 0 0 0 0 0] [0 0 0 0 0 0]])))&quot; &quot;(map #(count (distinct %))(apply concat (map #(partition 4 1 %) [[0 0 0 0 0 0] [0 0 0 0 0 0] [0 0 0 0 0 0] [0 0 0 0 0 0]])))&quot; &quot;(apply concat (map #(partition 4 1 %) [[0 0 0 0 0 0] [0 0 0 0 0 0] [0 0 0 0 0 0] [0 0 0 0 0 0]]))&quot; &quot;(map #(when (not= (first %) 0) (apply = %))(apply concat (map #(partition 4 1 %) [[0 0 0 0 0 0] [0 0 0 0 0 0] [0 0 0 0 0 0] [0 0 0 0 0 0]])))&quot; &quot;(map #(when (not= (first %) 0) (apply = %))(apply concat (map #(partition 4 1 %) [[0 0 0 0 0 0] [1 1 1 1 0 0] [0 0 0 0 0 0] [0 0 0 0 0 0]])))&quot; &quot;(map #(when (not= (first %) 0) (apply = %))(apply concat (map #(partition 4 1 %) [[0 0 0 0 0 0] [0 1 1 1 1 0] [0 0 0 0 0 0] [0 0 0 0 0 0]])))&quot; &quot;(apply or (map #(when (not= (first %) 0) (apply = %))(apply concat (map #(partition 4 1 %) [[0 0 0 0 0 0] [0 1 1 1 1 0] [0 0 0 0 0 0] [0 0 0 0 0 0]]))))&quot; &quot;(or (map #(when (not= (first %) 0) (apply = %) false)(apply concat (map #(partition 4 1 %) [[0 0 0 0 0 0] [0 1 1 1 1 0] [0 0 0 0 0 0] [0 0 0 0 0 0]]))))&quot; &quot;(or (map #(when (not= (first %) 0) (apply = %) (false))(apply concat (map #(partition 4 1 %) [[0 0 0 0 0 0] [0 1 1 1 1 0] [0 0 0 0 0 0] [0 0 0 0 0 0]]))))&quot; &quot;(or (map #(apply = %)(apply concat (map #(when (first (not zero?)) (partition 4 1 %)) [[0 0 0 0 0 0] [0 1 1 1 1 0] [0 0 0 0 0 0] [0 0 0 0 0 0]]))))&quot; &quot;(map #(apply = %)(apply concat (map #(when (first (not zero?)) (partition 4 1 %)) [[0 0 0 0 0 0] [0 1 1 1 1 0] [0 0 0 0 0 0] [0 0 0 0 0 0]])))&quot; &quot;(map #(apply = %)(apply concat (map #(when (first % (not zero?)) (partition 4 1 %)) [[0 0 0 0 0 0] [0 1 1 1 1 0] [0 0 0 0 0 0] [0 0 0 0 0 0]])))&quot; &quot;(map #(apply = %)(apply concat (map #(when (not= (first %) 0) (partition 4 1 %)) [[0 0 0 0 0 0] [0 1 1 1 1 0] [0 0 0 0 0 0] [0 0 0 0 0 0]])))&quot; &quot;(or (map #(when (not= (first %) 0) (apply = %))(apply concat (map #(partition 4 1 %) [[0 0 0 0 0 0] [0 1 1 1 1 0] [0 0 0 0 0 0] [0 0 0 0 0 0]]))))&quot; &quot;(some true? (map #(when (not= (first %) 0) (apply = %))(apply concat (map #(partition 4 1 %) [[0 0 0 0 0 0] [0 1 1 1 1 0] [0 0 0 0 0 0] [0 0 0 0 0 0]]))))&quot; &quot;(end-game [[0 0 0 0 0 0][0 0 0 0 0 0]])&quot; &quot;(end-game [[0 0 0 0 0 0][0 0 0 0 0 0][0 1 1 1 1 0][0 0 0 0 0 0]])&quot; &quot;(end-game [[0 0 0 0 0 0][0 0 0 0 0 0][0 1 1 1 1 0][0 0 0 0 0 0]] 1)&quot; &quot;(end-game [[0 0 0 0 0 0][0 0 0 0 0 0][0 1 1 1 1 0][0 0 0 0 0 0]] 2)&quot; &quot;(end-game [[0 0 0 0 0 0][0 0 0 0 0 0][0 0 0 0 0 0][0 0 0 0 0 0]] 1)&quot; &quot;(end-game [[0 0 0 0 0 0][0 0 0 0 0 0][0 0 0 0 0 0][0 0 0 0 0 0]] 2)&quot; &quot;(end-game [[2 0 0 0 0 0][2 0 0 0 0 0][2 0 0 0 0 0][2 0 0 0 0 0]] 2)&quot; &quot;(end-game [[0 0 0 2 0 0][0 0 0 2 0 0][0 0 0 2 0 0][0 0 0 2 0 0]] 2)&quot; &quot;(time (end-game [[0 0 0 2 0 0][0 0 0 2 0 0][0 0 0 2 0 0][0 0 0 2 0 0]] 2))&quot; &quot;(rotate [[1 0 0] [0 1 1] [0 0 1]] 1)&quot; &quot;(rotate [[1 0 0] [0 1 1] [0 0 1]] )&quot; &quot;(check-diag [[0 0 0 0 0 0][1 0 0 1 0 0][0 1 1 1 0 0]])&quot; &quot;(time )&quot; &quot;(check-row [[0 0 0 0 0 0] [0 0 0 0 0 1]])&quot; &quot;(time (check-diag [[0 0 0 0 0 0][1 0 0 1 0 0][0 1 1 1 0 0]]))&quot; &quot;(time (check-diag [[0 0 0 0 0 1][0 0 0 0 1 0][0 0 0 1 0 0][0 0 1 0 0 0]]))&quot; &quot;(end-game [[0 0 0 0 0 1][0 0 0 0 1 0][0 0 0 1 0 0][0 0 1 0 0 0][0 0 0 0 0 0][0 0 0 0 0 0][0 0 0 0 0 0]])&quot; &quot;(time end-game [[0 0 0 0 0 1][0 0 0 0 1 0][0 0 0 1 0 0][0 0 1 0 0 0][0 0 0 0 0 0][0 0 0 0 0 0][0 0 0 0 0 0]])&quot; &quot;(time (end-game [[0 0 0 0 0 1][0 0 0 0 1 0][0 0 0 1 0 0][0 0 1 0 0 0][0 0 0 0 0 0][0 0 0 0 0 0][0 0 0 0 0 0]]))&quot; &quot;(time (end-game [[0,0,0,0,0,1],[0,0,2,2,2,1],[0,0,0,1,1,1],[0,0,0,0,1,2],[0,0,0,0,0,0],[0,0,0,0,0,2],[0,0,0,0,1,2]]))&quot; &quot;(time (end-game [[0,0,0,0,0,1],[0,2,2,2,2,1],[0,0,0,1,1,1],[0,0,0,0,1,2],[0,0,0,0,0,0],[0,0,0,0,0,2],[0,0,0,0,1,2]]))&quot; &quot;(time (check-diag [[0 0 0 0 0 1][0 0 0 0 1 0][0 0 0 1 0 0][0 0 1 0 0 0][0 0 0 0 0 0][0 0 0 0 0 0][0 0 0 0 0 0]]))&quot; &quot;(time (check-diag [[0 0 0 0 0 1][0 0 0 0 1 0][0 0 0 1 0 0][0 0 0 0 0 0][0 0 0 0 0 0][0 0 0 0 0 0][0 0 0 0 0 0]]))&quot; &quot;(points-per-four [0 0 0 0])&quot; &quot;(get )&quot; &quot;(get (points-per-four [0 0 0 0]) 0)&quot; &quot;(get (points-per-four [0 0 0 0]) 1)&quot; &quot;(points-per-four [0 0 0 0] 1)&quot; &quot;(points-per-four [0 0 0 0] 2)&quot; &quot;(points-per-four [1 1 0 0] 2)&quot; &quot;(points-per-four [1 1 1 0] 2)&quot; &quot;(points-per-four [1 1 1 0] 1)&quot; &quot;(points-per-four [1 1 2 0] 1)&quot; &quot;(get-diagonal-fours)&quot; &quot;(time (get-diagonal-fours [[0 0 0 0 0 1][0 0 0 0 1 0][0 0 0 1 0 0][0 0 0 0 0 0][0 0 0 0 0 0][0 0 0 0 0 0][0 0 0 0 0 0]]))&quot; &quot;(concat (get-diagonal-fours [[0 0 0 0 0 1][0 0 0 0 1 0][0 0 0 1 0 0][0 0 0 0 0 0][0 0 0 0 0 0][0 0 0 0 0 0][0 0 0 0 0 0]]) (get-row-fours [[0 0 0 0 0 1][0 0 0 0 1 0][0 0 0 1 0 0][0 0 0 0 0 0][0 0 0 0 0 0][0 0 0 0 0 0][0 0 0 0 0 0]]))&quot; &quot;(time (concat (get-diagonal-fours [[0 0 0 0 0 1][0 0 0 0 1 0][0 0 0 1 0 0][0 0 0 0 0 0][0 0 0 0 0 0][0 0 0 0 0 0][0 0 0 0 0 0]]) (get-row-fours [[0 0 0 0 0 1][0 0 0 0 1 0][0 0 0 1 0 0][0 0 0 0 0 0][0 0 0 0 0 0][0 0 0 0 0 0][0 0 0 0 0 0]])))&quot; &quot;(utility )&quot; &quot;(utility [[0 0 0 0 0 1][0 0 0 0 1 0][0 0 0 1 0 0][0 0 0 0 0 0][0 0 0 0 0 0][0 0 0 0 0 0][0 0 0 0 0 0]] 1)&quot; &quot;(max-r [[0 0 0 0 0 1][0 0 0 0 1 0][0 0 0 1 0 0][0 0 0 0 0 0][0 0 0 0 0 0][0 0 0 0 0 0][0 0 0 0 0 0]] -100000 100000 1)&quot; &quot;(max-r [[0 0 0 0 0 1][0 0 0 0 1 0][0 0 0 1 0 0][0 0 0 0 0 0][0 0 0 0 0 0][0 0 0 0 0 0][0 0 0 0 0 0]] -100000 100000 1 1)&quot; &quot;(get-column-fours [[0 0 0 0 0 2][0 0 0 0 0 2][0 0 0 0 0 2][0 0 0 0 0 0][0 0 0 0 0 0][0 0 0 0 0 0][0 0 0 0 0 0]])&quot; &quot;(get-row-fours [[0 0 0 0 0 2][0 0 0 0 0 2][0 0 0 0 0 2][0 0 0 0 0 0][0 0 0 0 0 0][0 0 0 0 0 0][0 0 0 0 0 0]])&quot; &quot;(get-diagonal-fours [[0 0 0 0 0 2][0 0 0 0 0 2][0 0 0 0 0 2][0 0 0 0 0 0][0 0 0 0 0 0][0 0 0 0 0 0][0 0 0 0 0 0]])&quot; &quot;(max-r [[0 0 0 0 0 1][0 0 0 0 0 1][0 0 0 0 0 1][0 0 0 0 0 0][0 0 0 0 0 0][0 0 0 0 0 0][0 0 0 0 0 0]] -100000 100000 1 1)&quot; &quot;(utility [[0 0 0 0 0 2][0 0 0 0 0 2][0 0 0 0 0 2][0 0 0 0 0 0][0 0 0 0 0 1][0 0 0 0 0 1][0 0 0 0 0 1]] 1)&quot; &quot;(max-r [[0 0 0 0 0 2][0 0 0 0 0 2][0 0 0 0 0 2][0 0 0 0 0 0][0 0 0 0 0 0][0 0 0 0 0 0][0 0 0 0 0 0]] -100000 100000 1 1)&quot; &quot;(utility [[0 0 0 0 0 2][0 0 0 0 0 2][0 0 0 0 0 2][0 0 0 0 0 0][0 0 0 0 0 0][0 0 0 0 0 0][0 0 0 0 0 0]] 1)&quot; &quot;(utility [[0 0 0 0 0 2][0 0 0 0 0 2][0 0 0 0 0 2][0 0 0 0 0 1][0 0 0 0 0 0][0 0 0 0 0 0][0 0 0 0 0 0]] 1)&quot; &quot;(utility [[0 0 0 0 0 2][0 0 0 0 0 2][0 0 0 0 0 2][0 0 0 0 0 0][0 0 0 0 0 1][0 0 0 0 0 0][0 0 0 0 0 0]] 1)&quot; &quot;(utility [[0 0 0 0 0 1][0 0 0 0 0 1][0 0 0 0 0 1][0 0 0 0 0 0][0 0 0 0 0 0][0 0 0 0 0 0][0 0 0 0 0 0]] 1)&quot; &quot;(max-r [[0 0 0 0 0 2][0 0 0 0 0 2][0 0 0 0 0 2][0 0 0 0 0 0][0 0 0 0 0 0][0 0 0 0 0 0][0 0 0 0 0 0]] -100000 100000 1 1 1)&quot; &quot;(utility 0 [[0 0 0 0 0 2][0 0 0 0 0 2][0 0 0 0 0 2][0 0 0 0 0 0][0 0 0 0 0 0][0 0 0 0 0 0][0 0 0 0 0 0]] 1)&quot; &quot;(find-move 0 [[0 0 0 0 0 2][0 0 0 0 0 2][0 0 0 0 0 2][0 0 0 0 0 0][0 0 0 0 0 0][0 0 0 0 0 0][0 0 0 0 0 0]] 1)&quot; &quot;(println (read-line))&quot; &quot;(-main)&quot;], :remote []}}</component>
</project>