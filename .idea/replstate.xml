<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1487824404877">{:repl-history {:ide [], :local [&quot;(println (max-r [[0 0 0] [0 0 0] [0 0 0]] -10000 10000 2))&quot; &quot;(println (max-r [[0 0 0] [0 0 0] [0 0 0]] -10000 10000 1 2))&quot; &quot;(println (max-r [[0 0 0] [0 0 0] [0 0 0]] -10000 10000 10 2))&quot; &quot;(time (println (max-r [[0 0 0] [0 0 0] [0 0 0]] -10000 10000 1 2)))&quot; &quot;(time (println (max-r [[0 0 0] [0 0 0] [0 0 0]] -10000 10000 10 2)))&quot; &quot;(time (println (max-r [[0 0 0] [0 0 0] [0 0 0]] -10000 10000 2 2)))&quot; &quot;(get-valid-moves [[0 0 0 0 0 0] [0 0 0 0 0 0]] 2 2)&quot; &quot;(get-valid-moves [[0 0 0 0 0 0] [0 0 0 0 0 0] [0 0 0 0 0 0] [0 0 0 0 0 0] [ 0 0 0 0 0 0]] 2)&quot; &quot;(def inmp {[[0 0 0 0 0 0] [0 0 0 0 0 0]] :state 3 :alpha 5 :beta})&quot; &quot;(def inmp {:state [[0 0 0 0 0 0] [0 0 0 0 0 0]]  :alpha 3 :beta 5})&quot; &quot;(min-r inmp)&quot; &quot;(apply-move [[0 0 0 0 0 0] [0 0 0 0 0 0] [0 0 0 0 0 0]] 2 2)&quot; &quot;(time (get-valid-moves [[0 0 0 0 0 0] [0 0 0 0 0 0] [0 0 0 0 0 0] [0 0 0 0 0 0] [ 0 0 0 0 0 0]] 2))&quot; &quot;(time (get-valid-moves [[0 0 0 0 0 0] [0 0 0 0 0 0] [0 0 0 0 0 0] [0 0 0 0 0 0] [ 1 1 1 1 1 1]] 2))&quot; &quot;(nth (get-valid-moves [[0 0 0 0 0 0] [0 0 0 0 0 0] [0 0 0 0 0 0] [0 0 0 0 0 0] [ 1 1 1 1 1 1]] 2) 0)&quot; &quot;(max-r [[0 0 0] [0 0 0] [0 0 0]] -10000 10000 2 2)&quot; &quot;(max-r [[0 0 0] [0 0 0] [0 0 0]] -10000 10000 0 2)&quot; &quot;(max-r [[0 0 0 0 0 0] [0 0 0 0 0 0] [0 0 0 0 0 0] [0 0 0 0 0 0] [0 0 0 0 0 0]] -10000 10000 0 2)&quot; &quot;(random-move [[0 0 0 0 0 0] [0 0 0 0 0 0] [1 1 1 1 1 1]] 2)&quot; &quot;(random-move [[0 0 0 0 0 0] [0 0 0 0 0 0] [0 0 0 0 0 0]] 2)&quot; &quot;(-main)&quot; &quot;(end-game )&quot; &quot;(end-game [[0 0 0 0 0 0] [0 0 0 0 0 0] [1 1 0 1 0 1]])&quot; &quot;(end-game ] [1 1 1 1 1 1] [1 1 1 1 1 1]])&quot; &quot;(end-game [[1 1 1 1 1 1] [1 1 1 1 1 1] [1 1 1 1 1 1]])&quot; &quot;(end-game [[1 ] [1 1 1 1 1 1] [1 1 1 1 1 1]])&quot; &quot;(end-game [[0 0 0 0 0 0] [0 0 0 0 0 0] [0 0 0 0 0 0]])&quot; &quot;(end-game [[0 0 0 0 0 0] [0 0 0 0 0 0] [1 0 0 0 0 0]])&quot; &quot;(end-game [[0 0 0 0 0 0] [0 0 0 0 0 0] [1 1 1 0 0 0]])&quot; &quot;(end-game [[0 0 0 0 0 0] [0 0 0 0 0 0] [1 1 1 1 0 0]])&quot; &quot;(end-game [[0 0 0 0 0 0] [0 0 0 0 0 0] [1 1 1 1 1 1]])&quot; &quot;(partition 4 1 [[0 0 0 0 0 0] [0 0 0 0 0 0]])&quot; &quot;(map (partition 4 1 %) [[0 0 0][0 0 0]])&quot; &quot;(map #(partition 4 1 %) [[0 0 0][0 0 0]])&quot; &quot;(partition 4 1 [0 0 0 0 0 0])&quot; &quot;(map #(partition 4 1 %) ([0 0 0] [0 0 0]))&quot; &quot;(map #(partition 4 1 %) [[0 0 0] [0 0 0]])&quot; &quot;(partition 4 1 [[0 0 0 0][0 0 0 0]])&quot; &quot;(map)&quot; &quot;(map #(partition 4 1 %) [[0 0 0 0] [0 0 0 0]])&quot; &quot;(map #(partition 4 1 %) [[0 0 0 0 0 0] [0 0 0 0 0 0] [0 0 0 0 0 0] [0 0 0 0 0 0]])&quot; &quot;(flatten (map #(partition 4 1 %) [[0 0 0 0 0 0] [0 0 0 0 0 0] [0 0 0 0 0 0] [0 0 0 0 0 0]]))&quot; &quot;(apply =(apply concat (map #(partition 4 1 %) [[0 0 0 0 0 0] [0 0 0 0 0 0] [0 0 0 0 0 0] [0 0 0 0 0 0]])))&quot; &quot;(map $(apply concat %) (map #(partition 4 1 %) [[0 0 0 0 0 0] [0 0 0 0 0 0] [0 0 0 0 0 0] [0 0 0 0 0 0]]))&quot; &quot;(map #(apply = %) (map #(partition 4 1 %) [[0 0 0 0 0 0] [0 0 0 0 0 0] [0 0 0 0 0 0] [0 0 0 0 0 0]]))&quot; &quot;(map #(apply concat %) (map #(partition 4 1 %) [[0 0 0 0 0 0] [0 0 0 0 0 0] [0 0 0 0 0 0] [0 0 0 0 0 0]]))&quot; &quot;(time (apply concat (map #(partition 4 1 %) [[0 0 0 0 0 0] [0 0 0 0 0 0] [0 0 0 0 0 0] [0 0 0 0 0 0]])))&quot; &quot;(time (map #((when (not= (first %) 0) (apply = %))) (apply concat (map #(partition 4 1 %) [[0 0 0 0 0 0] [0 0 0 0 0 0] [0 0 0 0 0 0] [0 0 0 0 0 0]]))))&quot; &quot;(map #(apply = %) (apply concat (map #(partition 4 1 %) [[0 0 0 0 0 0] [0 0 0 0 0 0] [0 0 0 0 0 0] [0 0 0 0 0 0]])))&quot; &quot;(map #(apply = %) (apply concat (map #((when (not zero?) (partition 4 1 %) [[0 0 0 0 0 0] [0 0 0 0 0 0] [0 0 0 0 0 0] [0 0 0 0 0 0]])))&quot; &quot;(map #(apply = %) (apply concat (map #((when (not zero?) (partition 4 1 %))) [[0 0 0 0 0 0] [0 0 0 0 0 0] [0 0 0 0 0 0] [0 0 0 0 0 0]])))&quot; &quot;(map #(apply = %) (apply concat (map #((when (and (not zero?) number?) (partition 4 1 %))) [[0 0 0 0 0 0] [0 0 0 0 0 0] [0 0 0 0 0 0] [0 0 0 0 0 0]])))&quot; &quot;(time (map #(apply = %) (apply concat (map #(partition 4 1 %) [[0 0 0 0 0 0] [0 0 0 0 0 0] [0 0 0 0 0 0] [0 0 0 0 0 0]]))))&quot; &quot;(map #(set %) (apply concat (map #(partition 4 1 %) [[0 0 0 0 0 0] [0 0 0 0 0 0] [0 0 0 0 0 0] [0 0 0 0 0 0]])))&quot; &quot;(time (map #(set %) (apply concat (map #(partition 4 1 %) [[0 0 0 0 0 0] [0 0 0 0 0 0] [0 0 0 0 0 0] [0 0 0 0 0 0]]))))&quot; &quot;(map #((&gt; (count %) 1)) (map #(set %) (apply concat (map #(partition 4 1 %) [[0 0 0 0 0 0] [0 0 0 0 0 0] [0 0 0 0 0 0] [0 0 0 0 0 0]])))&quot; &quot;(map #((&gt; (count %) 1)) (map #(set %) (apply concat (map #(partition 4 1 %) [[0 0 0 0 0 0] [0 0 0 0 0 0] [0 0 0 0 0 0] [0 0 0 0 0 0]]))))&quot; &quot;(apply set (apply concat (map #(partition 4 1 %) [[0 0 0 0 0 0] [0 0 0 0 0 0] [0 0 0 0 0 0] [0 0 0 0 0 0]])))&quot; &quot;(map #((count (distinct %)))(apply concat (map #(partition 4 1 %) [[0 0 0 0 0 0] [0 0 0 0 0 0] [0 0 0 0 0 0] [0 0 0 0 0 0]])))&quot; &quot;(count (distinct [0 0 0 0]))&quot; &quot;(count (distinct (0 0 0 0))&quot; &quot;(count (distinct (0 0 0 0)))&quot; &quot;(map #((count (distinct (quote %))))(apply concat (map #(partition 4 1 %) [[0 0 0 0 0 0] [0 0 0 0 0 0] [0 0 0 0 0 0] [0 0 0 0 0 0]])))&quot; &quot;(map #((count (distinct '%)))(apply concat (map #(partition 4 1 %) [[0 0 0 0 0 0] [0 0 0 0 0 0] [0 0 0 0 0 0] [0 0 0 0 0 0]])))&quot; &quot;(map #((count (distinct (into [] %))))(apply concat (map #(partition 4 1 %) [[0 0 0 0 0 0] [0 0 0 0 0 0] [0 0 0 0 0 0] [0 0 0 0 0 0]])))&quot; &quot;(map #(count (distinct %))(apply concat (map #(partition 4 1 %) [[0 0 0 0 0 0] [0 0 0 0 0 0] [0 0 0 0 0 0] [0 0 0 0 0 0]])))&quot; &quot;(apply concat (map #(partition 4 1 %) [[0 0 0 0 0 0] [0 0 0 0 0 0] [0 0 0 0 0 0] [0 0 0 0 0 0]]))&quot; &quot;(map #(when (not= (first %) 0) (apply = %))(apply concat (map #(partition 4 1 %) [[0 0 0 0 0 0] [0 0 0 0 0 0] [0 0 0 0 0 0] [0 0 0 0 0 0]])))&quot; &quot;(map #(when (not= (first %) 0) (apply = %))(apply concat (map #(partition 4 1 %) [[0 0 0 0 0 0] [1 1 1 1 0 0] [0 0 0 0 0 0] [0 0 0 0 0 0]])))&quot; &quot;(map #(when (not= (first %) 0) (apply = %))(apply concat (map #(partition 4 1 %) [[0 0 0 0 0 0] [0 1 1 1 1 0] [0 0 0 0 0 0] [0 0 0 0 0 0]])))&quot; &quot;(apply or (map #(when (not= (first %) 0) (apply = %))(apply concat (map #(partition 4 1 %) [[0 0 0 0 0 0] [0 1 1 1 1 0] [0 0 0 0 0 0] [0 0 0 0 0 0]]))))&quot; &quot;(or (map #(when (not= (first %) 0) (apply = %) false)(apply concat (map #(partition 4 1 %) [[0 0 0 0 0 0] [0 1 1 1 1 0] [0 0 0 0 0 0] [0 0 0 0 0 0]]))))&quot; &quot;(or (map #(when (not= (first %) 0) (apply = %) (false))(apply concat (map #(partition 4 1 %) [[0 0 0 0 0 0] [0 1 1 1 1 0] [0 0 0 0 0 0] [0 0 0 0 0 0]]))))&quot; &quot;(or (map #(apply = %)(apply concat (map #(when (first (not zero?)) (partition 4 1 %)) [[0 0 0 0 0 0] [0 1 1 1 1 0] [0 0 0 0 0 0] [0 0 0 0 0 0]]))))&quot; &quot;(map #(apply = %)(apply concat (map #(when (first (not zero?)) (partition 4 1 %)) [[0 0 0 0 0 0] [0 1 1 1 1 0] [0 0 0 0 0 0] [0 0 0 0 0 0]])))&quot; &quot;(map #(apply = %)(apply concat (map #(when (first % (not zero?)) (partition 4 1 %)) [[0 0 0 0 0 0] [0 1 1 1 1 0] [0 0 0 0 0 0] [0 0 0 0 0 0]])))&quot; &quot;(map #(apply = %)(apply concat (map #(when (not= (first %) 0) (partition 4 1 %)) [[0 0 0 0 0 0] [0 1 1 1 1 0] [0 0 0 0 0 0] [0 0 0 0 0 0]])))&quot; &quot;(or (map #(when (not= (first %) 0) (apply = %))(apply concat (map #(partition 4 1 %) [[0 0 0 0 0 0] [0 1 1 1 1 0] [0 0 0 0 0 0] [0 0 0 0 0 0]]))))&quot; &quot;(end-game [[0 0 0 0 0 0][0 0 0 0 0 0]])&quot; &quot;(some true? (map #(when (not= (first %) 0) (apply = %))(apply concat (map #(partition 4 1 %) [[0 0 0 0 0 0] [0 1 1 1 1 0] [0 0 0 0 0 0] [0 0 0 0 0 0]]))))&quot;], :remote []}}</component>
</project>